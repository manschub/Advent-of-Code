clc; clear all;
% Advent of code 2023 - day 18 - part 1+2
% Open file and take needed data
file_id = fopen("day18_test.dat");
data = textscan(file_id,strcat('%s %f %s'),'delimiter',' ()','MultipleDelimsAsOne',1);
% Close file
fclose(file_id);

% Rearrange data to be handled nicer
directions_tmp = data{1,1};
for i = 1:length(directions_tmp)
    directions(i,1) = directions_tmp{i,1};
end
steps = data{1,2};
color = data{1,3};
% Generate the strings map
map(1:length(steps),1:length(steps)) = '.';

row = 1; col = 1;
% row = length(steps)/2; col = length(steps)/2;
map(row,col) = '#';
row_store = row; col_store = col;
% We need to dig out from the top right following the directions
for i = 1:length(steps)
    if (directions(i) == 'R')
        map(row,col:col+steps(i)) = '#';
        row_store(end+1:end+steps(i)) = row;
        col_store(end+1:end+steps(i)) = col+1:col+steps(i);
        col = col+steps(i);
    elseif (directions(i) == 'U')
        map(row-steps(i):row,col) = '#';
        row_store(end+1:end+steps(i)) = row-1:-1:row-steps(i);
        col_store(end+1:end+steps(i)) = col;
        row = row-steps(i);
    elseif (directions(i) == 'L')
        map(row,col-steps(i):col) = '#';
        row_store(end+1:end+steps(i)) = row;
        col_store(end+1:end+steps(i)) = col-1:-1:col-steps(i);
        col = col-steps(i);
    elseif (directions(i) == 'D')
        map(row:row+steps(i),col) = '#';
        row_store(end+1:end+steps(i)) = row+1:row+steps(i);
        col_store(end+1:end+steps(i)) = col;
        row = row+steps(i);
    end
end
% Now count the fields within the dug out area
% We go from left to right for each row and count area from 1st to 2nd '#'
% for k = 1:2
% dug = 0;
% for i=1:length(map(:,1))
%     % Find min and max # in each row
%     [y,x] = find(map(i,:) == '#');
%     if (~isempty(x))
%         if (sum(diff(x)) == length(x)-1)
%             dug = dug + length(x);
%         elseif (length(x) == 2)
%             dug = dug + x(end) - x(1) + 1;
%         else
%             for j=2:length(x)
%                 if (x(j)-x(j-1) == 1)
%                     dug = dug+1;
%                 end
%             end
%         end
%     end

%     cnt = 0; multiple = 0;
%     for j=1:length(map(1,:))
%         if (cnt == 1 && map(i,j-1) == '#' && map(i,j) == '#')
%             map(i,j) = '#';
%             multiple = 1;
%         elseif (cnt == 1 && map(i,j-1) == '#' && map(i,j) == '.')
%             if (multiple == 0)
%                 map(i,j) = '#';
%             end
%         elseif (map(i,j) == '#')
%             map(i,j) = '#';
%             cnt = cnt+1;
%         elseif (map(i,j) == '.' && cnt == 1)
%             map(i,j) = '#';
%         end
%         if (cnt >= 2 && map(i,j) == '.')
%             cnt = 0;
%         elseif (cnt == 1 && multiple && map(i,j) == '.') 
%             cnt = 0;
%         end
%     end
% end
% Results part 1
% result_part1 = dug;
% fprintf('%10f',result_part1)
% fprintf('\n')

% Draw area enclosed by loop
figure(1)
h = fill(row_store(:),col_store(:),'b');
hold on
% % Save X and Y data of the pixels that enclose the area
rows_filled = h.XData;
cols_filled = h.YData;
enclosed = 0;
for i = 1:length(map(:,1))
    % Loop through rows
    for j = 1:length(map(1,:))
        % Loop through columns
        % Check if it is enclosed 
        % Find enclosed points 
        [in,on] = inpolygon(i,j,rows_filled,cols_filled);
        if (in && on)
            enclosed = enclosed + 2;
        else
    end
end
result_part1 = enclosed;
fprintf('%10f',result_part1)
fprintf('\n')



